name: sharding-repl-cache
services:
  # сервер конфигурации
  configSrv:
    image: mongo:latest # docker образ
    container_name: configSrv
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - config-data:/data/db
    command:
      [
        "--configsvr",  # запуск в режиме конфигурации
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
      
  # роутер
  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - "27020:27020"
    command:
      [
        "mongos", # обычная mongo в режиме роутера
        "--configdb",
        "config_server/configSrv:27017", # передача данных сервера конфигурации
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
      
  # 1-й шард 1-я реплика
  shard1_replica1:
    image: mongo:latest # docker образ
    container_name: shard1_replica1
    restart: always
    ports:
      - "27021:27021"
    volumes:
      - shard1-replica1-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard1_replicaset",
        "--bind_ip_all",
        "--port",
        "27021"
      ] #команда для создания реплики
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
  
  # 1-й шард 2-я реплика
  shard1_replica2:
    image: mongo:latest
    container_name: shard1_replica2
    restart: always
    ports:
      - "27022:27022"
    volumes:
      - shard1-replica2-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard1_replicaset",
        "--bind_ip_all",
        "--port",
        "27022"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
  
  # 1-й шард 3-я реплика
  shard1_replica3:
    image: mongo:latest
    container_name: shard1_replica3
    restart: always
    ports:
      - "27023:27023"
    volumes:
      - shard1-replica3-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard1_replicaset",
        "--bind_ip_all",
        "--port",
        "27023"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
    
    # 2-й шард 1-я реплика
  shard2_replica1:
    image: mongo:latest # docker образ
    container_name: shard2_replica1
    restart: always
    ports:
      - "27024:27024"
    volumes:
      - shard2-replica1-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard2_replicaset",
        "--bind_ip_all",
        "--port",
        "27024"
      ] #команда для создания реплики
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
  
  # 2-й шард 2-я реплика
  shard2_replica2:
    image: mongo:latest
    container_name: shard2_replica2
    restart: always
    ports:
      - "27025:27025"
    volumes:
      - shard2-replica2-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard2_replicaset",
        "--bind_ip_all",
        "--port",
        "27025"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s
  
  # 2-й шард 3-я реплика
  shard2_replica3:
    image: mongo:latest
    container_name: shard2_replica3
    restart: always
    ports:
      - "27026:27026"
    volumes:
      - shard2-replica3-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard2_replicaset",
        "--bind_ip_all",
        "--port",
        "27026"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  pymongo_api:
    container_name: pymongo_api
    build: 
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router
    ports:
      - 8080:8080
    environment:
      MONGODB_URL: "mongodb://mongos_router:27020"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis:6379"
  
  redis:
    image: "redis:latest"
    container_name: redis
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]

volumes:
  config-data:
  shard1-replica1-data:
  shard1-replica2-data:
  shard1-replica3-data:
  shard2-replica1-data:
  shard2-replica2-data:
  shard2-replica3-data:
  redis_data: {}
